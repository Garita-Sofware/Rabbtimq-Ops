name: ArgoCD - Enable/Disable RabbitMQ Apps

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Ambiente"
        type: choice
        required: true
        options: [dev, uat, prod]
      instances:
        description: "Instancias habilitadas (CSV, 1..5). Ej: 1,3,5"
        required: true
        default: "1"
      apply_appset:
        description: "Aplicar AppProject y ApplicationSet (si aún no están)?"
        type: boolean
        required: true
        default: true

permissions:
  contents: write

jobs:
  enable:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Preparar carpeta enabled/
        run: |
          mkdir -p k8s/argocd/enabled
          # Limpia todos los habilitadores previos de rabbitmq (opcional: comenta si deseas preservar otros)
          rm -f k8s/argocd/enabled/*.yaml

          # Parsear CSV y validar
          IFS=',' read -ra PARTS <<< "${{ inputs.instances }}"
          declare -A SEEN
          for p in "${PARTS[@]}"; do
            p_trim=$(echo "$p" | xargs)
            if [[ "$p_trim" =~ ^[1-5]$ ]]; then
              # evitar duplicados
              if [[ -n "${SEEN[$p_trim]}" ]]; then
                echo "Instancia duplicada $p_trim (omitida)"; continue
              fi
              SEEN[$p_trim]=1
              file="k8s/argocd/enabled/${{ inputs.environment }}-${p_trim}.yaml"
              echo "env: ${{ inputs.environment }}" > "$file"
              echo "instance: \"$p_trim\"" >> "$file"
              echo "Creado $file"
            else
              echo "Instancia inválida: '$p_trim' (use 1..5)"; exit 1
            fi
          done

      - name: Commit & Push changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add k8s/argocd/enabled/*.yaml
            git commit -m "Enable RabbitMQ apps: env=${{ inputs.environment }}, instances=${{ inputs.instances }}"
            git push
          else
            echo "No hay cambios para commitear."
          fi

      - name: (Opcional) Aplicar AppProject y ApplicationSet
        if: ${{ inputs.apply_appset == 'true' }}
        env:
          KUBECONFIG_TEXT: ${{ secrets.KUBE_CONFIG }}
        run: |
          # kubectl para aplicar los manifests de ArgoCD (solo necesario la primera vez o si cambian)
          sudo apt-get update -y && sudo apt-get install -y curl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl

          mkdir -p $HOME/.kube
          printf "%s" "${KUBECONFIG_TEXT}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

          kubectl apply -n argocd -f k8s/argocd/argocd-project-rabbitmq.yaml
          kubectl apply -n argocd -f k8s/argocd/argocd-appset-rabbitmq.yaml

      - name: Esperar reconciliación corta (opcional)
        run: |
          echo "Esperando a que el ApplicationSet recoja los cambios..."
          sleep 10
          # Listar las Applications (si ya existen)
          kubectl get applications.argoproj.io -n argocd | grep rabbitmq || true
        env:
          KUBECONFIG_TEXT: ${{ secrets.KUBE_CONFIG }}