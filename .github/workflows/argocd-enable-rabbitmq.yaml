name: ArgoCD - Enable/Disable RabbitMQ Apps

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Ambiente"
        type: choice
        required: true
        options: [dev, uat, prod]
      instances:
        description: "Instancias habilitadas (CSV, 1..5). Ej: 1,3,5"
        required: true
        default: "1"
      apply_appset:
        description: "Aplicar AppProject y ApplicationSet (si aún no están)?"
        type: boolean
        required: true
        default: true

permissions:
  contents: write

jobs:
  enable:
    runs-on: ubuntu-latest
    env:
      KUBECONFIG_TEXT: ${{ secrets.KUBE_CONFIG }}
      GIT_REPO_URL: ${{ secrets.GIT_REPO_URL }}
      GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      # KUBECONFIG se setea en un step y queda en el entorno
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set KUBECONFIG path
        run: echo "KUBECONFIG=$RUNNER_TEMP/kubeconfig" >> "$GITHUB_ENV"

      - name: Preparar carpeta enabled/
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p k8s/argocd/enabled
          rm -f k8s/argocd/enabled/*.yaml

          IFS=',' read -ra PARTS <<< "${{ inputs.instances }}"
          declare -A SEEN=()
          for p in "${PARTS[@]}"; do
            p_trim="$(echo "$p" | xargs)"
            if [[ "$p_trim" =~ ^[1-5]$ ]]; then
              # Evita 'unbound variable' con set -u:
              if [[ -v "SEEN[$p_trim]" ]]; then
                echo "Instancia duplicada $p_trim (omitida)"; continue
              fi
              SEEN["$p_trim"]=1
              file="argocd/enabled/${{ inputs.environment }}-${p_trim}.yaml"
              {
                echo "env: ${{ inputs.environment }}"
                echo "instance: \"$p_trim\""
              } > "$file"
              echo "Creado $file"
            else
              echo "Instancia inválida: '$p_trim' (use 1..5)"; exit 1
            fi
          done

          echo "Contenido enabled/:"
          ls -la argocd/enabled

      - name: Commit & Push changes
        shell: bash
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Incluye adds/changes/deletes dentro de enabled/
          git add -A argocd/enabled

          if git diff --cached --quiet; then
            echo "No hay cambios para commitear."
            exit 0
          fi

          git commit -m "Enable RabbitMQ apps: env=${{ inputs.environment }}, instances=${{ inputs.instances }}"
          git push

      - name: Instalar kubectl
        if: ${{ inputs.apply_appset == 'true' }}
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.33.3'  # ajusta si quieres

      - name: Configurar kubeconfig (texto plano)
        if: ${{ inputs.apply_appset == 'true' }}
        run: |
          printf "%s" "${KUBECONFIG_TEXT}" > "${KUBECONFIG}"
          chmod 600 "${KUBECONFIG}"
          kubectl version --short || true
          kubectl cluster-info || true

      - name: (Privado) Crear/actualizar Repo Secret en ArgoCD
        if: ${{ inputs.apply_appset == 'true' && env.GIT_REPO_URL != '' }}
        run: |
          cat <<EOF | kubectl apply -n argocd -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: repo-rabbitmq-ops
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: repository
          stringData:
            url: ${GIT_REPO_URL}
            username: ${GIT_USERNAME}
            password: ${GIT_TOKEN}
          EOF
          kubectl get secret repo-rabbitmq-ops -n argocd -o yaml | sed -n '1,40p' || true

      - name: Aplicar AppProject y ApplicationSet
        if: ${{ inputs.apply_appset == 'true' }}
        run: |
          # Asegúrate que estas rutas existen en tu repo:
          kubectl apply -n argocd -f argocd/argocd-project-rabbitmq.yaml
          kubectl apply -n argocd -f argocd/argocd-appset-rabbitmq.yaml

      - name: Esperar reconciliación corta (opcional)
        if: ${{ inputs.apply_appset == 'true' }}
        run: |
          echo "Esperando a que el ApplicationSet recoja los cambios..."
          sleep 12
          echo "Pods en argocd:" && kubectl get pods -n argocd
          echo "Applications actuales:" && kubectl get applications.argoproj.io -n argocd || true
          echo "Estado del ApplicationSet:" && kubectl get applicationset rabbitmq-appset -n argocd -o yaml | sed -n '/status:/,$p' || true
          echo "Logs del controller (últimas 120 líneas):" && kubectl logs deploy/argocd-applicationset-controller -n argocd --tail=120 || true
